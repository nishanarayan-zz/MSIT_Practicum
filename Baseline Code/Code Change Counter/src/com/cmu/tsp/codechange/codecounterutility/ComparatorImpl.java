package com.cmu.tsp.codechange.codecounterutility;

import java.util.ArrayList;
import java.util.List;


import com.cmu.tsp.codechange.base.ChangeDescriptor;
import com.cmu.tsp.codechange.base.Comparator;
import com.cmu.tsp.codechange.base.Reader;
import com.cmu.tsp.codechange.library.*;

/**
 * This class implements the comparator interface. This class is responsible for
 * comparing two source files and compting differences between them.
 * 
 * @author Abhishek
 *
 */
public class ComparatorImpl implements Comparator {
	
	// File 1 - This is considered as the older version of a file
	protected Reader file1;
	
	// File 2 - This is considered as the newer version of a file
	protected Reader file2;
	
	// Line buffer for two files
	protected List<String> text1;
	protected List<String> text2;
	
	// List of differences between two files
	protected List<ChangeDescriptor> changes;
	
	/**
	 * This method initiates the comparison operation over the two input files. The differences
	 * are stored in the "changes" field.
	 */
	public void compareAllLines() throws Exception {
		
		text1 = new ArrayList<String>();
		text2 = new ArrayList<String>();
		
		try {	
			// open the first file
			file1.open();
			// Fill in the line buffer from the file1
			while(!file1.isEmpty()){
				text1.add(file1.readLine());
			}
			// Close the input file
			file1.close();	
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		}
		
		try {	
			// open the second file
			file2.open();
			
			// Fill in the line buffer from the file2
			while(!file2.isEmpty()){
				text2.add(file2.readLine());
			}
			// Close the input file
			file2.close();		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Retrieve the differences from the library that computes difference
		// between two files. 
		transformDiffToChangeDescriptor(new Diff<String>(text1, text2).diff());
		
	}

	/**
	 * This method is responsible to transform differences represented in the 
	 * form of "Difference" class into "ChangeDescriptor". Difference class is
	 * used by the library and ChangeDesciptor is used by the controller.
	 * @param list: List of differences. The list is generated by the library
	 */
	protected void transformDiffToChangeDescriptor(List<Difference> list) {
	       
			changes = new ArrayList<ChangeDescriptor>();
			ChangeDescriptor cd = null;
			
			// Iterate over all differences
			for (Difference diff : list) {
				
				// create a new change description
				cd = new ChangeDescriptor();
				
				// This indicates the line number of source1 where difference begins
				int delStart = diff.getDeletedStart();
	            cd.setDelStart(delStart);
				
	            // This indicates the linenumber of source1 where difference ends
	            int  delEnd = diff.getDeletedEnd();
	            cd.setDelEnd(delEnd);
	             
	            // This indicates the line number of source2 where difference begins
	            int addStart = diff.getAddedStart();
	            cd.setAddStart(addStart);
	            
	            // This indicates the linenumber of source2 where difference ends
	            int addEnd = diff.getAddedEnd();
	            cd.setAddEnd(addEnd);
	            
	            // Compute the type of the difference.
	            // Types are: added, deleted or modified line
	            String type = delEnd != Difference.NONE && addEnd != Difference.NONE ? "c" : (delEnd == Difference.NONE ? "a" : "d");
	            
	            if(type.equals("c")){
	            	cd.setType(ChangeDescriptor.CH_MODIFIED);
	            }else if(type.equals("a")){
	            	cd.setType(ChangeDescriptor.CH_ADDED);
	            }else {
	            	cd.setType(ChangeDescriptor.CH_DELETED);
	            }
	            
	            // Set the lines that are different from source file1.
	            List sourceLines = new ArrayList(); 
	            if (delEnd != Difference.NONE) {
	            	 for (int lnum = delStart; lnum <= delEnd; ++lnum) {
	 	            	sourceLines.add((String)text1.get(lnum));
	 	             };
	            }
	            cd.setSourceLines(sourceLines);
	            
	             // Set the lines that are different from source file1.
	            List destLines = new ArrayList();
	            if (addEnd != Difference.NONE) {
	            	 for (int lnum = addStart; lnum <= addEnd; ++lnum) {
	            		 destLines.add((String)text2.get(lnum));
		 	         };
	            }
	            cd.setDestLines(destLines);
           
	            // Add the change description
	            changes.add(cd);
	       }
	}
   
	/**
	 * This returns the list of changes (ChangeDescription)
	 */
	public List getAllChanges() {
		return changes;
	}

	/**
	 * This sets the two source files two be compared.
	 */
	public void setSources(Reader reader1, Reader reader2) {
		file1 = reader1;
		file2 = reader2;
	}

	public ChangeDescriptor voidCompareNextLine() {
		// TODO Auto-generated method stub
		return null;
	}

}
